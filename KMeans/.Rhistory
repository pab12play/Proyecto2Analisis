dataCursosPerdidos <- read_csv("ProjectData//DataSets/conteoCursosPerdidos.csv")
setwd("/home/akabane/Desktop/Proyecto2Analisis")
# xlsx files
my_data <- read_excel("ProjectData/ListadoPromedios.xlsx")
dataCompletos <- read_csv("ProjectData/DataSets/cursosCompletos.csv")
dataCursosAprobados <- read_csv("ProjectData/DataSets/ListadoPromedios.csv")
dataCursosAprobados <- read_csv("ProjectData/ListadoPromedios.csv")
dataCursosAprobados <- read_csv("ProjectData/ListadoPromedios.xlsx")
dataCursosAprobados <- read_excel("ProjectData/ListadoPromedios.xlsx")
dataCursosPerdidos <- read_csv("ProjectData/DataSets/conteoCursosPerdidos.csv")
dataCursosPerdidos <- read_csv("ProjectData/DataSets/conteoCursosPerdidos.csv")
set.seed(23544727)
CursosAprobados = dataCursosAprobados[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosAprobadosScale <- scale(CursosAprobados)
nClustersCursosAprobados = fviz_nbclust(CursosAprobadosScale, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosAprobados = kmeans(CursosAprobadosScale, 4, nstart = 30)
graficakCursosAprobados = fviz_cluster(clustersCursosAprobados, data = CursosAprobadosScale) + ggtitle("Similitud en cursos aprobados")
aggregate(CursosAprobados,by=list(clustersCursosAprobados$cluster),mean)
save(CursosAprobadosScale, file = "KMeans/Data/CursosAprobadosScale.RData")
pdf("KMeans/Plots/CursosAprobados.pdf", width=30, height=50)
grid.arrange(graficakCursosAprobados, nClustersCursosAprobados, nrow = 2)
dev.off()
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosPerdidosScale <- scale(CursosPerdidos)
nClustersCursosPerdidos = fviz_nbclust(CursosPerdidosScale, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 3, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
save(CursosPerdidosScale, file = "KMeans/Data/CursosPerdidosScale.RData")
pdf("KMeans/Plots/CursosPerdidos.pdf", width=30, height=50)
grid.arrange(graficakCursosPerdidos, nClustersCursosPerdidos, nrow = 2)
dev.off()
porTipoExamen = dataCompletos[c("No_tip_examen","Nota")]
porTipoExamenScale <- scale(porTipoExamen)
nClustersTipoExamen = fviz_nbclust(porTipoExamenScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersTipoExamen = kmeans(porTipoExamenScale, 3, nstart = 30)
graficakTipoExamen = fviz_cluster(clustersTipoExamen, data = porTipoExamenScale) + ggtitle("Similitud por Tipo de Examen")
aggregate(porTipoExamen,by=list(clustersTipoExamen$cluster),mean)
save(CursosAprobadosScale, file = "KMeans/Data/porTipoExamenScale.RData")
pdf("KMeans/Plots/porTipoExamen.pdf", width=30, height=50)
grid.arrange(graficakTipoExamen, nClustersTipoExamen, nrow = 2)
dev.off()
CursosAprobados = dataCursosAprobados[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosAprobadosScale <- scale(CursosAprobados)
nClustersCursosAprobados = fviz_nbclust(CursosAprobadosScale, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosAprobados = kmeans(CursosAprobadosScale, 4, nstart = 30)
graficakCursosAprobados = fviz_cluster(clustersCursosAprobados, data = CursosAprobadosScale) + ggtitle("Similitud en cursos aprobados")
aggregate(CursosAprobados,by=list(clustersCursosAprobados$cluster),mean)
save(CursosAprobadosScale, file = "KMeans/Data/CursosAprobadosScale.RData")
pdf("KMeans/Plots/CursosAprobados.pdf", width=30, height=50)
grid.arrange(graficakCursosAprobados, nClustersCursosAprobados, nrow = 2)
dev.off()
nClustersCursosAprobados
graficakCursosAprobados
clustersCursosAprobados = kmeans(CursosAprobadosScale, 3, nstart = 30)
graficakCursosAprobados = fviz_cluster(clustersCursosAprobados, data = CursosAprobadosScale) + ggtitle("Similitud en cursos aprobados")
graficakCursosAprobados
CursosAprobados = dataCursosAprobados[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosAprobadosScale <- scale(CursosAprobados)
nClustersCursosAprobados = fviz_nbclust(CursosAprobadosScale, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosAprobados = kmeans(CursosAprobadosScale, 3, nstart = 30)
graficakCursosAprobados = fviz_cluster(clustersCursosAprobados, data = CursosAprobadosScale) + ggtitle("Similitud en cursos aprobados")
aggregate(CursosAprobados,by=list(clustersCursosAprobados$cluster),mean)
save(CursosAprobadosScale, file = "KMeans/Data/CursosAprobadosScale.RData")
pdf("KMeans/Plots/CursosAprobados.pdf", width=30, height=50)
grid.arrange(graficakCursosAprobados, nClustersCursosAprobados, nrow = 2)
dev.off()
clustersCursosAprobados
nClustersCursosAprobados
CursosAprobados = dataCursosAprobados[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosAprobadosScale <- scale(CursosAprobados)
nClustersCursosAprobados = fviz_nbclust(CursosAprobadosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosAprobados = kmeans(CursosAprobadosScale, 3, nstart = 30)
graficakCursosAprobados = fviz_cluster(clustersCursosAprobados, data = CursosAprobadosScale) + ggtitle("Similitud en cursos aprobados")
aggregate(CursosAprobados,by=list(clustersCursosAprobados$cluster),mean)
save(CursosAprobadosScale, file = "KMeans/Data/CursosAprobadosScale.RData")
pdf("KMeans/Plots/CursosAprobados.pdf", width=30, height=50)
grid.arrange(graficakCursosAprobados, nClustersCursosAprobados, nrow = 2)
dev.off()
nClustersCursosAprobados
clustersCursosAprobados
graficakCursosAprobados
aggregate(CursosAprobados,by=list(clustersCursosAprobados$cluster),mean)
CursosAprobados = dataCursosAprobados[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosAprobadosScale <- scale(CursosAprobados)
nClustersCursosAprobados = fviz_nbclust(CursosAprobadosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosAprobados = kmeans(CursosAprobadosScale, 3, nstart = 30)
graficakCursosAprobados = fviz_cluster(clustersCursosAprobados, data = CursosAprobadosScale) + ggtitle("Similitud en cursos aprobados")
aggregate(CursosAprobados,by=list(clustersCursosAprobados$cluster),mean)
save(CursosAprobados, file = "KMeans/Data/CursosAprobados.RData")
pdf("KMeans/Plots/CursosAprobados.pdf", width=30, height=50)
grid.arrange(graficakCursosAprobados, nClustersCursosAprobados, nrow = 2)
dev.off()
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosPerdidosScale <- scale(CursosPerdidos)
nClustersCursosPerdidos = fviz_nbclust(CursosPerdidosScale, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 3, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
save(CursosPerdidosScale, file = "KMeans/Data/CursosPerdidosScale.RData")
pdf("KMeans/Plots/CursosPerdidos.pdf", width=30, height=50)
grid.arrange(graficakCursosPerdidos, nClustersCursosPerdidos, nrow = 2)
dev.off()
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosPerdidosScale <- scale(CursosPerdidos)
CursosPerdidos
porTipoExamen = dataCompletos[c("No_tip_examen","Nota")]
porTipoExamenScale <- scale(porTipoExamen)
nClustersTipoExamen = fviz_nbclust(porTipoExamenScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersTipoExamen = kmeans(porTipoExamenScale, 3, nstart = 30)
graficakTipoExamen = fviz_cluster(clustersTipoExamen, data = porTipoExamenScale) + ggtitle("Similitud por Tipo de Examen")
aggregate(porTipoExamen,by=list(clustersTipoExamen$cluster),mean)
save(CursosAprobadosScale, file = "KMeans/Data/porTipoExamenScale.RData")
pdf("KMeans/Plots/porTipoExamen.pdf", width=30, height=50)
grid.arrange(graficakTipoExamen, nClustersTipoExamen, nrow = 2)
dev.off()
nClustersTipoExamen
clustersTipoExamen
graficakTipoExamen
porTipoExamen = dataCompletos[c("No_tip_examen","Nota")]
porTipoExamenScale <- scale(porTipoExamen)
nClustersTipoExamen = fviz_nbclust(porTipoExamenScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersTipoExamen = kmeans(porTipoExamenScale, 3, nstart = 30)
graficakTipoExamen = fviz_cluster(clustersTipoExamen, data = porTipoExamenScale) + ggtitle("Similitud por Tipo de Examen")
aggregate(porTipoExamen,by=list(clustersTipoExamen$cluster),mean)
save(porTipoExamen, file = "KMeans/Data/porTipoExamen.RData")
pdf("KMeans/Plots/porTipoExamen.pdf", width=30, height=50)
grid.arrange(graficakTipoExamen, nClustersTipoExamen, nrow = 2)
dev.off()
dataCursosPerdidos <- read_csv("ProjectData/DataSets/conteoCursosPerdidos.csv")
dataCursosPerdidos
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosPerdidosScale <- scale(CursosPerdidos)
nClustersCursosPerdidos = fviz_nbclust(CursosPerdidosScale, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 3, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
save(CursosPerdidosScale, file = "KMeans/Data/CursosPerdidosScale.RData")
pdf("KMeans/Plots/CursosPerdidos.pdf", width=30, height=50)
grid.arrange(graficakCursosPerdidos, nClustersCursosPerdidos, nrow = 2)
dev.off()
nClustersCursosPerdidos
graficakCursosPerdidos
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 4, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
graficakCursosPerdidos
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosPerdidosScale <- scale(CursosPerdidos)
nClustersCursosPerdidos = fviz_nbclust(CursosPerdidosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 3, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
save(CursosPerdidosScale, file = "KMeans/Data/CursosPerdidosScale.RData")
pdf("KMeans/Plots/CursosPerdidos.pdf", width=30, height=50)
grid.arrange(graficakCursosPerdidos, nClustersCursosPerdidos, nrow = 2)
dev.off()
nClustersCursosPerdidos
graficakCursosPerdidos
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosPerdidosScale <- scale(CursosPerdidos)
nClustersCursosPerdidos = fviz_nbclust(CursosPerdidosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 3, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
save(CursosPerdidos, file = "KMeans/Data/CursosPerdidos.RData")
pdf("KMeans/Plots/CursosPerdidos.pdf", width=30, height=50)
grid.arrange(graficakCursosPerdidos, nClustersCursosPerdidos, nrow = 2)
dev.off()
dataCursosPerdidos
View(dataCursosPerdidos)
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados","Conteo_cursos_perdidos")]
CursosPerdidosScale <- scale(CursosPerdidos)
nClustersCursosPerdidos = fviz_nbclust(CursosPerdidosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 3, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
save(CursosPerdidos, file = "KMeans/Data/CursosPerdidos.RData")
pdf("KMeans/Plots/CursosPerdidos.pdf", width=30, height=50)
grid.arrange(graficakCursosPerdidos, nClustersCursosPerdidos, nrow = 2)
dev.off()
nClustersCursosPerdidos
graficakCursosPerdidos
nClustersCursosPerdidos
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 4, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
graficakCursosPerdidos
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados","Conteo_cursos_perdidos")]
CursosPerdidosScale <- scale(CursosPerdidos)
nClustersCursosPerdidos = fviz_nbclust(CursosPerdidosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 3, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
save(CursosPerdidos, file = "KMeans/Data/CursosPerdidos.RData")
pdf("KMeans/Plots/CursosPerdidos.pdf", width=30, height=50)
grid.arrange(graficakCursosPerdidos, nClustersCursosPerdidos, nrow = 2)
dev.off()
PromedioPonderado = my_data[, c("Promedio_Ponderado_Acumulado", "cursos_acumulados")]
row.names(PromedioPonderado) = my_data$ID
nclustersPromPond = fviz_nbclust(PromedioPonderado, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("N?mero ?ptimo de clusters")
clustersPromPond = kmeans(PromedioPonderado, 3, nstart = 100)
graficakPromPond = fviz_cluster(clustersPromPond, data = PromedioPonderado) + ggtitle("Promedio acomulado x N?meroo de cursos") +  labs(x = "Promedio ponderado", y = "Total cursos")
save(PromedioPonderado, file = "KMeans/Data/PromedioPonderado.RData")
pdf("KMeans/Plots/PromedioPond.pdf", width=30, height=50)
jpeg("imagen1.jpg")
grid.arrange(graficakPromPond, nclustersPromPond, nrow = 2)
dev.off()
#install.packages("readxl")
library("readxl")
#install.packages("factoextra")
library("factoextra")
#install.packages("gridExtra")
library("gridExtra")
#install.packages("ggplot2")
library(ggplot2)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("readr")
library(readr)
setwd("C:/Users/Abraham/Desktop/Proyecto2Analisis") #comentar y agregar sus rutas
setwd("D:/Documents/Universidad/Octavo ciclo/ANÁLISIS DE DATOS/Proyecto2/Proyecto2Analisis")
setwd("/home/akabane/Desktop/Proyecto2Analisis")
# xlsx files
my_data <- read_excel("ProjectData/ListadoPromedios.xlsx")
dataCompletos <- read_csv("ProjectData/DataSets/cursosCompletos.csv")
dataCursosAprobados <- read_excel("ProjectData/ListadoPromedios.xlsx")
dataCursosPerdidos <- read_csv("ProjectData/DataSets/conteoCursosPerdidos.csv")
set.seed(23544727)
#Plot de promedio simple por anio
pdf("KMeans/Plots/PromedioSimplePorAnio.pdf", width=22, height=12)
ggplot() + geom_point(aes(x = my_data$año, y =  (my_data$Promedio_Simple_Acumulado)), data = my_data, alpha = 0.5) + ggtitle('Conjunto de Datos') + labs(colour = "Cylinders") + labs(x = "Anio") + labs(y = "Promedio Ponderado")
dev.off()
#Plot de promedio ponderado por anio
pdf("KMeans/Plots/PromedioPondPorAnio.pdf", width=22, height=12)
ggplot() + geom_point(aes(x = my_data$año, y =  (my_data$Promedio_Ponderado_Acumulado)), data = my_data, alpha = 0.5) + ggtitle('Conjunto de Datos')  + labs(colour = "Cylinders") + labs(x = "Anio") + labs(y = "Promedio Ponderado")
dev.off()
#Box diagram de promedio ponderado por anio
pdf("KMeans/Plots/PromedioPondPorAnioBox.pdf", width=20, height=12)
ggplot() + geom_boxplot(aes(x = my_data$año, y =  (my_data$Promedio_Ponderado_Acumulado)), data = my_data, alpha = 0.5) + ggtitle('Conjunto de Datos')  + labs(colour = "Cylinders") + labs(x = "Anio") + labs(y = "Promedio Ponderado")
dev.off()
#Promedio simple x numero de cursos
PromedioSimple = my_data[,c("prom_simp_x_ciclo", "cursos_acumulados")]
row.names(PromedioSimple) = my_data$ID
nclustersPromSimp = fviz_nbclust(PromedioSimple, kmeans, method = "wss") + geom_vline(xintercept = 3 ,linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromSimp = kmeans(PromedioSimple, 3, nstart = 20)
graficakPromSimp = fviz_cluster(clustersPromSimp, data = PromedioSimple) + ggtitle("Promedio Simple x Numero de cursos") + labs(x = "Promedio simple", y = "Total cursos")
save(PromedioSimple, file = "KMeans/Data/PromedioSimple.RData")
pdf("KMeans/Plots/PromedioSimple.pdf", width=30, height=50)
jpeg("imagen1.jpg")
grid.arrange(graficakPromSimp, nclustersPromSimp, nrow = 2)
dev.off()
PromedioPonderado = my_data[, c("Promedio_Ponderado_Acumulado", "cursos_acumulados")]
row.names(PromedioPonderado) = my_data$ID
nclustersPromPond = fviz_nbclust(PromedioPonderado, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromPond = kmeans(PromedioPonderado, 3, nstart = 100)
graficakPromPond = fviz_cluster(clustersPromPond, data = PromedioPonderado) + ggtitle("Promedio acomulado x Numero de cursos") +  labs(x = "Promedio ponderado", y = "Total cursos")
save(PromedioPonderado, file = "KMeans/Data/PromedioPonderado.RData")
pdf("KMeans/Plots/PromedioPond.pdf", width=30, height=50)
jpeg("imagen2.jpg")
grid.arrange(graficakPromPond, nclustersPromPond, nrow = 2)
dev.off()
PromedioAno = my_data[, c("año", "prom_simp_x_ciclo")]
PromedioAno$año = as.numeric(as.character(PromedioAno$año))
row.names(PromedioAno) = my_data$ID
nClustersPromAno = fviz_nbclust(PromedioAno, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromAno = kmeans(PromedioAno, 3, nstart = 30)
graficakPromAno = fviz_cluster(clustersPromAno, data = PromedioAno) + ggtitle("Promedio acomulado x A?o (No relevante)") +  labs(x = "Promedio simple", y = "Anio")
save(PromedioAno, file = "KMeans/Data/PromedioAnio.RData")
pdf("KMeans/Plots/PromedioAni.pdf", width=30, height=50)
jpeg("imagen3.jpg")
grid.arrange(graficakPromAno, nClustersPromAno, nrow = 2)
dev.off()
promedioCursoCFI = read.csv("ProjectData/promedioCursoCFI.csv", header = TRUE)
row.names(promedioCursoCFI) = promedioCursoCFI$ID
promedioCursoCFI = promedioCursoCFI[, c("Cursos", "Promedio")]
nClustersPromCFI = fviz_nbclust(promedioCursoCFI, kmeans, method = "wss") + geom_vline(xintercept = 7, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromCFI = kmeans(promedioCursoCFI, 7, nstart = 30)
graficakPromCFI = fviz_cluster(clustersPromCFI, data = promedioCursoCFI) + ggtitle("Promedio cursos CFI x Numero de cursos") +  labs(x = "Cursos", y = "Promedio Cursos CFI")
save(promedioCursoCFI, file = "KMeans/Data/promedioCursoCFI.RData")
pdf("KMeans/Plots/PromedioCFI.pdf", width=30, height=50)
jpeg("imagen4.jpg")
grid.arrange(graficakPromCFI, nClustersPromCFI, nrow = 2)
dev.off()
#-----------------
promedioCursoEspecifico = read.csv("ProjectData/promedioCursoEspecifico.csv", header = TRUE)
row.names(promedioCursoEspecifico) = promedioCursoEspecifico$ID
promedioCursoEspecifico = promedioCursoEspecifico[, c("Cursos", "Promedio")]
nClustersPromEspecifico = fviz_nbclust(promedioCursoEspecifico, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromEspecifico = kmeans(promedioCursoEspecifico, 3, nstart = 30)
graficakPromEspecifico = fviz_cluster(clustersPromEspecifico, data = promedioCursoEspecifico) + ggtitle("Promedio cursos area especifica x Numero de cursos") +  labs(x = "Cursos", y = "Promedio Cursos especificos")
save(promedioCursoEspecifico, file = "KMeans/Data/promedioCursoEspecifico.RData")
pdf("KMeans/Plots/PromedioEspecifico.pdf", width=30, height=50)
jpeg("imagen5.jpg")
grid.arrange(graficakPromEspecifico, nClustersPromEspecifico, nrow = 2)
dev.off()
promedioCursoNumerico = read.csv("ProjectData/promedioCursoNumerico.csv", header = TRUE)
row.names(promedioCursoNumerico) = promedioCursoNumerico$ID
promedioCursoNumerico = promedioCursoNumerico[, c("Cursos", "Promedio")]
nClustersPromNumerico = fviz_nbclust(promedioCursoNumerico, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromNumerico = kmeans(promedioCursoNumerico, 4, nstart = 30)
graficakPromNumerico = fviz_cluster(clustersPromNumerico, data = promedioCursoNumerico) + ggtitle("Promedio cursos area Basicos x Numero de cursos") +  labs(x = "Cursos", y = "Promedio Cursos Basicos")
save(promedioCursoNumerico, file = "KMeans/Data/promedioCursoNumerico.RData")
pdf("KMeans/Plots/PromedioNumerico.pdf", width=30, height=50)
jpeg("imagen6.jpg")
grid.arrange(graficakPromNumerico, nClustersPromNumerico, nrow = 2)
dev.off()
promedioCursoProfecionales = read.csv("ProjectData/promedioCursosProfecionales.csv", header = TRUE)
row.names(promedioCursoProfecionales) = promedioCursoProfecionales$ID
promedioCursoProfecionales = promedioCursoProfecionales[, c("Cursos", "Promedio")]
nClustersPromProfecionales = fviz_nbclust(promedioCursoProfecionales, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromProfecionales = kmeans(promedioCursoProfecionales, 4, nstart = 30)
graficakPromProfecionales = fviz_cluster(clustersPromProfecionales, data = promedioCursoProfecionales) + ggtitle("Promedio cursos area Profesional x Numero de cursos") +  labs(x = "Cursos", y = "Promedio Cursos profesionales")
save(promedioCursoProfecionales, file = "KMeans/Data/promedioCursoProfecionales.RData")
pdf("KMeans/Plots/PromedioProfecionales.pdf", width=30, height=50)
jpeg("imagen7.jpg")
grid.arrange(graficakPromProfecionales, nClustersPromProfecionales, nrow = 2)
dev.off()
#----------
CursosAprobados = dataCursosAprobados[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosAprobadosScale <- scale(CursosAprobados)
nClustersCursosAprobados = fviz_nbclust(CursosAprobadosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosAprobados = kmeans(CursosAprobadosScale, 3, nstart = 30)
graficakCursosAprobados = fviz_cluster(clustersCursosAprobados, data = CursosAprobadosScale) + ggtitle("Similitud en cursos aprobados")
aggregate(CursosAprobados,by=list(clustersCursosAprobados$cluster),mean)
save(CursosAprobados, file = "KMeans/Data/CursosAprobados.RData")
pdf("KMeans/Plots/CursosAprobados.pdf", width=30, height=50)
jpeg("imagen8.jpg")
grid.arrange(graficakCursosAprobados, nClustersCursosAprobados, nrow = 2)
dev.off()
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados","Conteo_cursos_perdidos")]
CursosPerdidosScale <- scale(CursosPerdidos)
nClustersCursosPerdidos = fviz_nbclust(CursosPerdidosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 3, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
save(CursosPerdidos, file = "KMeans/Data/CursosPerdidos.RData")
pdf("KMeans/Plots/CursosPerdidos.pdf", width=30, height=50)
jpeg("imagen9.jpg")
grid.arrange(graficakCursosPerdidos, nClustersCursosPerdidos, nrow = 2)
dev.off()
porTipoExamen = dataCompletos[c("No_tip_examen","Nota")]
porTipoExamenScale <- scale(porTipoExamen)
nClustersTipoExamen = fviz_nbclust(porTipoExamenScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersTipoExamen = kmeans(porTipoExamenScale, 3, nstart = 30)
graficakTipoExamen = fviz_cluster(clustersTipoExamen, data = porTipoExamenScale) + ggtitle("Similitud por Tipo de Examen")
aggregate(porTipoExamen,by=list(clustersTipoExamen$cluster),mean)
save(porTipoExamen, file = "KMeans/Data/porTipoExamen.RData")
pdf("KMeans/Plots/porTipoExamen.pdf", width=30, height=50)
jpeg("imagen10.jpg")
grid.arrange(graficakTipoExamen, nClustersTipoExamen, nrow = 2)
dev.off()
#install.packages("readxl")
library("readxl")
#install.packages("factoextra")
library("factoextra")
#install.packages("gridExtra")
library("gridExtra")
#install.packages("ggplot2")
library(ggplot2)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("readr")
library(readr)
setwd("/home/akabane/Desktop/Proyecto2Analisis")
# xlsx files
my_data <- read_excel("ProjectData/ListadoPromedios.xlsx")
dataCompletos <- read_csv("ProjectData/DataSets/cursosCompletos.csv")
dataCursosAprobados <- read_excel("ProjectData/ListadoPromedios.xlsx")
dataCursosPerdidos <- read_csv("ProjectData/DataSets/conteoCursosPerdidos.csv")
set.seed(23544727)
#Plot de promedio simple por anio
pdf("KMeans/Plots/PromedioSimplePorAnio.pdf", width=22, height=12)
ggplot() + geom_point(aes(x = my_data$año, y =  (my_data$Promedio_Simple_Acumulado)), data = my_data, alpha = 0.5) + ggtitle('Conjunto de Datos') + labs(colour = "Cylinders") + labs(x = "Anio") + labs(y = "Promedio Ponderado")
dev.off()
#Plot de promedio ponderado por anio
pdf("KMeans/Plots/PromedioPondPorAnio.pdf", width=22, height=12)
ggplot() + geom_point(aes(x = my_data$año, y =  (my_data$Promedio_Ponderado_Acumulado)), data = my_data, alpha = 0.5) + ggtitle('Conjunto de Datos')  + labs(colour = "Cylinders") + labs(x = "Anio") + labs(y = "Promedio Ponderado")
dev.off()
#Box diagram de promedio ponderado por anio
pdf("KMeans/Plots/PromedioPondPorAnioBox.pdf", width=20, height=12)
ggplot() + geom_boxplot(aes(x = my_data$año, y =  (my_data$Promedio_Ponderado_Acumulado)), data = my_data, alpha = 0.5) + ggtitle('Conjunto de Datos')  + labs(colour = "Cylinders") + labs(x = "Anio") + labs(y = "Promedio Ponderado")
dev.off()
#Promedio simple x numero de cursos
PromedioSimple = my_data[,c("prom_simp_x_ciclo", "cursos_acumulados")]
row.names(PromedioSimple) = my_data$ID
nclustersPromSimp = fviz_nbclust(PromedioSimple, kmeans, method = "wss") + geom_vline(xintercept = 3 ,linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromSimp = kmeans(PromedioSimple, 3, nstart = 20)
graficakPromSimp = fviz_cluster(clustersPromSimp, data = PromedioSimple) + ggtitle("Promedio Simple x Numero de cursos") + labs(x = "Promedio simple", y = "Total cursos")
save(PromedioSimple, file = "KMeans/Data/PromedioSimple.RData")
pdf("KMeans/Plots/PromedioSimple.pdf", width=30, height=50)
grid.arrange(graficakPromSimp, nclustersPromSimp, nrow = 2)
dev.off()
str(PromedioSimple)
TEMP <- as.data.frame(PromedioSimple)
str(TEMP)
save(TEMP, file = "KMeans/Data/PromedioSimple.rda")
PromedioPonderado = my_data[, c("Promedio_Ponderado_Acumulado", "cursos_acumulados")]
row.names(PromedioPonderado) = my_data$ID
nclustersPromPond = fviz_nbclust(PromedioPonderado, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromPond = kmeans(PromedioPonderado, 3, nstart = 100)
graficakPromPond = fviz_cluster(clustersPromPond, data = PromedioPonderado) + ggtitle("Promedio acomulado x Numero de cursos") +  labs(x = "Promedio ponderado", y = "Total cursos")
save(PromedioPonderado, file = "KMeans/Data/PromedioPonderado.RData")
pdf("KMeans/Plots/PromedioPond.pdf", width=30, height=50)
jpeg("imagen1.jpg")
grid.arrange(graficakPromPond, nclustersPromPond, nrow = 2)
dev.off()
str(PromedioPonderado)
TEMP <- as.data.frame(PromedioPonderado)
str(TEMP)
save(TEMP, file = "KMeans/Data/PromedioPonderado.rda")
PromedioAno = my_data[, c("año", "prom_simp_x_ciclo")]
PromedioAno$año = as.numeric(as.character(PromedioAno$año))
row.names(PromedioAno) = my_data$ID
nClustersPromAno = fviz_nbclust(PromedioAno, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromAno = kmeans(PromedioAno, 3, nstart = 30)
graficakPromAno = fviz_cluster(clustersPromAno, data = PromedioAno) + ggtitle("Promedio acomulado x A?o (No relevante)") +  labs(x = "Promedio simple", y = "Anio")
save(PromedioAno, file = "KMeans/Data/PromedioAnio.RData")
pdf("KMeans/Plots/PromedioAni.pdf", width=30, height=50)
grid.arrange(graficakPromAno, nClustersPromAno, nrow = 2)
dev.off()
str(PromedioAno)
TEMP <- as.data.frame(PromedioAno)
str(TEMP)
save(TEMP, file = "KMeans/Data/PromedioAnio.rda")
promedioCursoCFI = read.csv("ProjectData/promedioCursoCFI.csv", header = TRUE)
row.names(promedioCursoCFI) = promedioCursoCFI$ID
promedioCursoCFI = promedioCursoCFI[, c("Cursos", "Promedio")]
nClustersPromCFI = fviz_nbclust(promedioCursoCFI, kmeans, method = "wss") + geom_vline(xintercept = 7, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromCFI = kmeans(promedioCursoCFI, 7, nstart = 30)
graficakPromCFI = fviz_cluster(clustersPromCFI, data = promedioCursoCFI) + ggtitle("Promedio cursos CFI x Numero de cursos") +  labs(x = "Cursos", y = "Promedio Cursos CFI")
save(promedioCursoCFI, file = "KMeans/Data/promedioCursoCFI.RData")
pdf("KMeans/Plots/PromedioCFI.pdf", width=30, height=50)
grid.arrange(graficakPromCFI, nClustersPromCFI, nrow = 2)
dev.off()
str(promedioCursoCFI)
TEMP <- as.data.frame(promedioCursoCFI)
str(TEMP)
save(TEMP, file = "KMeans/Data/promedioCursoCFI.rda")
#-----------------
promedioCursoEspecifico = read.csv("ProjectData/promedioCursoEspecifico.csv", header = TRUE)
row.names(promedioCursoEspecifico) = promedioCursoEspecifico$ID
promedioCursoEspecifico = promedioCursoEspecifico[, c("Cursos", "Promedio")]
nClustersPromEspecifico = fviz_nbclust(promedioCursoEspecifico, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromEspecifico = kmeans(promedioCursoEspecifico, 3, nstart = 30)
graficakPromEspecifico = fviz_cluster(clustersPromEspecifico, data = promedioCursoEspecifico) + ggtitle("Promedio cursos area especifica x Numero de cursos") +  labs(x = "Cursos", y = "Promedio Cursos especificos")
save(promedioCursoEspecifico, file = "KMeans/Data/promedioCursoEspecifico.RData")
pdf("KMeans/Plots/PromedioEspecifico.pdf", width=30, height=50)
grid.arrange(graficakPromEspecifico, nClustersPromEspecifico, nrow = 2)
dev.off()
str(promedioCursoEspecifico)
TEMP <- as.data.frame(promedioCursoEspecifico)
str(TEMP)
save(TEMP, file = "KMeans/Data/promedioCursoEspecifico.rda")
promedioCursoNumerico = read.csv("ProjectData/promedioCursoNumerico.csv", header = TRUE)
row.names(promedioCursoNumerico) = promedioCursoNumerico$ID
promedioCursoNumerico = promedioCursoNumerico[, c("Cursos", "Promedio")]
nClustersPromNumerico = fviz_nbclust(promedioCursoNumerico, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromNumerico = kmeans(promedioCursoNumerico, 4, nstart = 30)
graficakPromNumerico = fviz_cluster(clustersPromNumerico, data = promedioCursoNumerico) + ggtitle("Promedio cursos area Basicos x Numero de cursos") +  labs(x = "Cursos", y = "Promedio Cursos Basicos")
save(promedioCursoNumerico, file = "KMeans/Data/promedioCursoNumerico.RData")
pdf("KMeans/Plots/PromedioNumerico.pdf", width=30, height=50)
grid.arrange(graficakPromNumerico, nClustersPromNumerico, nrow = 2)
dev.off()
str(promedioCursoNumerico)
TEMP <- as.data.frame(promedioCursoNumerico)
str(TEMP)
save(TEMP,  file = "KMeans/Data/promedioCursoNumerico.rda")
promedioCursoProfecionales = read.csv("ProjectData/promedioCursosProfecionales.csv", header = TRUE)
row.names(promedioCursoProfecionales) = promedioCursoProfecionales$ID
promedioCursoProfecionales = promedioCursoProfecionales[, c("Cursos", "Promedio")]
nClustersPromProfecionales = fviz_nbclust(promedioCursoProfecionales, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersPromProfecionales = kmeans(promedioCursoProfecionales, 4, nstart = 30)
graficakPromProfecionales = fviz_cluster(clustersPromProfecionales, data = promedioCursoProfecionales) + ggtitle("Promedio cursos area Profesional x Numero de cursos") +  labs(x = "Cursos", y = "Promedio Cursos profesionales")
save(promedioCursoProfecionales, file = "KMeans/Data/promedioCursoProfecionales.RData")
pdf("KMeans/Plots/PromedioProfecionales.pdf", width=30, height=50)
grid.arrange(graficakPromProfecionales, nClustersPromProfecionales, nrow = 2)
dev.off()
str(promedioCursoProfecionales)
TEMP <- as.data.frame(promedioCursoProfecionales)
str(TEMP)
save(TEMP, file = "KMeans/Data/promedioCursoProfecionales.rda")
#----------
CursosAprobados = dataCursosAprobados[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados")]
CursosAprobadosScale <- scale(CursosAprobados)
nClustersCursosAprobados = fviz_nbclust(CursosAprobadosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosAprobados = kmeans(CursosAprobadosScale, 3, nstart = 30)
graficakCursosAprobados = fviz_cluster(clustersCursosAprobados, data = CursosAprobadosScale) + ggtitle("Similitud en cursos aprobados")
aggregate(CursosAprobados,by=list(clustersCursosAprobados$cluster),mean)
save(CursosAprobados, file = "KMeans/Data/CursosAprobados.RData")
pdf("KMeans/Plots/CursosAprobados.pdf", width=30, height=50)
grid.arrange(graficakCursosAprobados, nClustersCursosAprobados, nrow = 2)
dev.off()
CursosPerdidos = dataCursosPerdidos[c("prom_simp_x_ciclo","cursos_x_ciclo","cursos_acumulados","Conteo_cursos_perdidos")]
CursosPerdidosScale <- scale(CursosPerdidos)
nClustersCursosPerdidos = fviz_nbclust(CursosPerdidosScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersCursosPerdidos = kmeans(CursosPerdidosScale, 3, nstart = 30)
graficakCursosPerdidos = fviz_cluster(clustersCursosPerdidos, data = CursosPerdidosScale) + ggtitle("Similitud en cursos Perdidos")
aggregate(CursosPerdidos,by=list(clustersCursosPerdidos$cluster),mean)
save(CursosPerdidos, file = "KMeans/Data/CursosPerdidos.RData")
pdf("KMeans/Plots/CursosPerdidos.pdf", width=30, height=50)
grid.arrange(graficakCursosPerdidos, nClustersCursosPerdidos, nrow = 2)
dev.off()
porTipoExamen = dataCompletos[c("No_tip_examen","Nota")]
porTipoExamenScale <- scale(porTipoExamen)
nClustersTipoExamen = fviz_nbclust(porTipoExamenScale, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2) + ggtitle("Numero optimo de clusters")
clustersTipoExamen = kmeans(porTipoExamenScale, 3, nstart = 30)
graficakTipoExamen = fviz_cluster(clustersTipoExamen, data = porTipoExamenScale) + ggtitle("Similitud por Tipo de Examen")
aggregate(porTipoExamen,by=list(clustersTipoExamen$cluster),mean)
save(porTipoExamen, file = "KMeans/Data/porTipoExamen.RData")
pdf("KMeans/Plots/porTipoExamen.pdf", width=30, height=50)
grid.arrange(graficakTipoExamen, nClustersTipoExamen, nrow = 2)
dev.off()
